
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------







export class demo {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 个数
     */
    readonly count: number

    resolve(tables:Tables) {
        
        
        
        
    }
}





export class vector2 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vector3 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vector4 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
        if (_json_.w === undefined) { throw new Error() }
        this.w = _json_.w
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}






export class Tbdemo {
    private _dataMap: Map<number, demo>
    private _dataList: demo[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, demo>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: demo
            _v = new demo(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, demo> { return this._dataMap; }
    getDataList(): demo[] { return this._dataList; }

    get(key: number): demo | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




type JsonLoader = (file: string) => any

export class Tables {
    private _Tbdemo: Tbdemo
    get Tbdemo(): Tbdemo  { return this._Tbdemo;}

    constructor(loader: JsonLoader) {
        this._Tbdemo = new Tbdemo(loader('tbdemo'))

        this._Tbdemo.resolve(this)
    }
}

