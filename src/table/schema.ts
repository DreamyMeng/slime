
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


 
export enum RoleQuality {
    /**
     * 无
     */
    none = 0,
    /**
     * 灵
     */
    ling = 1,
    /**
     * 仙
     */
    xian = 2,
    /**
     * 神
     */
    shen = 3,
}

 
 
export enum SkillTrigger {
    none = 0,
    /**
     * 战斗准备
     */
    ready = 1,
    /**
     * 战斗开始
     */
    start = 2,
    /**
     * 回合开始
     */
    round = 3,
    /**
     * 攻击前
     */
    attack = 4,
    /**
     * 攻击时
     */
    attacking = 5,
    /**
     * 攻击后
     */
    attacked = 6,
    /**
     * 受击前
     */
    hit = 7,
    /**
     * 受击时
     */
    hitting = 8,
    /**
     * 受击后
     */
    hitted = 9,
}

 
 
export enum SkillType {
    none = 0,
    health = 1,
    revive = 2,
    all = 3,
    change = 4,
    damage = 5,
    miss = 6,
    hit = 7,
    abandon = 8,
    skip = 9,
    ban = 10,
    replace = 11,
    skill = 12,
    learn = 13,
}

 
 
export enum Target {
    /**
     * 自身
     */
    self = 0,
    /**
     * 对手
     */
    enemy = 1,
}

 





export class achieve {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.type === undefined) { throw new Error() }
        this.type = _json_.type
        if(_json_.target != undefined) { this.target = _json_.target } else { this.target = undefined }
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
        if (_json_.description === undefined) { throw new Error() }
        this.description = _json_.description
        if (_json_.reward_type === undefined) { throw new Error() }
        this.rewardType = _json_.reward_type
        if (_json_.reward_str === undefined) { throw new Error() }
        this.rewardStr = _json_.reward_str
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 类型
     */
    readonly type: string
    /**
     * 目标
     */
    readonly target: string|undefined
    /**
     * 达成数
     */
    readonly count: number
    /**
     * 描述
     */
    readonly description: string
    /**
     * 奖励类型
     */
    readonly rewardType: string
    /**
     * 奖励描述
     */
    readonly rewardStr: string

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}





export class map_level {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.level_min === undefined) { throw new Error() }
        this.levelMin = _json_.level_min
        if (_json_.level_max === undefined) { throw new Error() }
        this.levelMax = _json_.level_max
        if (_json_.health_rate === undefined) { throw new Error() }
        this.healthRate = _json_.health_rate
        if (_json_.defence_rate === undefined) { throw new Error() }
        this.defenceRate = _json_.defence_rate
        if (_json_.attack_rate === undefined) { throw new Error() }
        this.attackRate = _json_.attack_rate
        if (_json_.monsters === undefined) { throw new Error() }
        { this.monsters = []; for(let _ele0 of _json_.monsters) { let _e0; _e0 = _ele0; this.monsters.push(_e0);}}
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 生物最小等级
     */
    readonly levelMin: number
    /**
     * 生物最大等级
     */
    readonly levelMax: number
    /**
     * 生物生命值倍率
     */
    readonly healthRate: number
    /**
     * 生物防御力倍率
     */
    readonly defenceRate: number
    /**
     * 生物攻击力倍率
     */
    readonly attackRate: number
    readonly monsters: number[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}





export class other {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.map === undefined) { throw new Error() }
        this.map = new Map<string, string>(); for(var _entry0_ of _json_.map) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.map.set(_k0, _v0);  }
    }

    /**
     * id
     */
    readonly id: string
    /**
     * 进化所需等级
     */
    readonly map: Map<string, string>

    resolve(tables:Tables) {
        
        
    }
}





export class role {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.rare === undefined) { throw new Error() }
        this.rare = _json_.rare
        if (_json_.quality_type === undefined) { throw new Error() }
        this.qualityType = _json_.quality_type
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.race === undefined) { throw new Error() }
        this.race = _json_.race
        if (_json_.remain === undefined) { throw new Error() }
        this.remain = _json_.remain
        if (_json_.exp_need === undefined) { throw new Error() }
        this.expNeed = _json_.exp_need
        if (_json_.exp_dead === undefined) { throw new Error() }
        this.expDead = _json_.exp_dead
        if (_json_.attack_rate === undefined) { throw new Error() }
        this.attackRate = _json_.attack_rate
        if (_json_.defence_rate === undefined) { throw new Error() }
        this.defenceRate = _json_.defence_rate
        if (_json_.health_rate === undefined) { throw new Error() }
        this.healthRate = _json_.health_rate
        if (_json_.attack_add === undefined) { throw new Error() }
        this.attackAdd = _json_.attack_add
        if (_json_.defence_add === undefined) { throw new Error() }
        this.defenceAdd = _json_.defence_add
        if (_json_.health_add === undefined) { throw new Error() }
        this.healthAdd = _json_.health_add
        if (_json_.ralations === undefined) { throw new Error() }
        this.ralations = new RoleRelation(_json_.ralations)
        if (_json_.skills === undefined) { throw new Error() }
        { this.skills = []; for(let _ele0 of _json_.skills) { let _e0; _e0 = _ele0; this.skills.push(_e0);}}
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 名字
     */
    readonly name: string
    /**
     * 稀有度
     */
    readonly rare: number
    /**
     * 品类
     */
    readonly qualityType: RoleQuality
    /**
     * 品质
     */
    readonly quality: number
    /**
     * 种族
     */
    readonly race: number
    /**
     * 保留
     */
    readonly remain: number
    /**
     * 升级所需经验比例
     */
    readonly expNeed: number
    /**
     * 死亡获得经验比例
     */
    readonly expDead: number
    /**
     * 攻击比例
     */
    readonly attackRate: number
    /**
     * 防御比例
     */
    readonly defenceRate: number
    /**
     * 血量比例
     */
    readonly healthRate: number
    /**
     * 图鉴攻击
     */
    readonly attackAdd: number
    /**
     * 图鉴防御
     */
    readonly defenceAdd: number
    /**
     * 图鉴血量
     */
    readonly healthAdd: number
    readonly ralations: RoleRelation
    readonly skills: string[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        this.ralations?.resolve(tables);
        
    }
}





export class role_level {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.exp_need === undefined) { throw new Error() }
        this.expNeed = _json_.exp_need
        if (_json_.exp_dead === undefined) { throw new Error() }
        this.expDead = _json_.exp_dead
        if (_json_.attack === undefined) { throw new Error() }
        this.attack = _json_.attack
        if (_json_.defence === undefined) { throw new Error() }
        this.defence = _json_.defence
        if (_json_.health === undefined) { throw new Error() }
        this.health = _json_.health
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 升级所需经验
     */
    readonly expNeed: number
    /**
     * 死亡获得经验
     */
    readonly expDead: number
    /**
     * 攻击值
     */
    readonly attack: number
    /**
     * 防御值
     */
    readonly defence: number
    /**
     * 生命值
     */
    readonly health: number

    resolve(tables:Tables) {
        
        
        
        
        
        
    }
}





export class RoleRelation {

    constructor(_json_: any) {
        if(_json_.chi != undefined) { this.chi = _json_.chi } else { this.chi = undefined }
        if(_json_.hui != undefined) { this.hui = _json_.hui } else { this.hui = undefined }
        if(_json_.lin != undefined) { this.lin = _json_.lin } else { this.lin = undefined }
        if(_json_.mao != undefined) { this.mao = _json_.mao } else { this.mao = undefined }
        if(_json_.jia != undefined) { this.jia = _json_.jia } else { this.jia = undefined }
        if(_json_.luo != undefined) { this.luo = _json_.luo } else { this.luo = undefined }
        if(_json_.yu != undefined) { this.yu = _json_.yu } else { this.yu = undefined }
        if(_json_.zhao != undefined) { this.zhao = _json_.zhao } else { this.zhao = undefined }
        if(_json_.ti != undefined) { this.ti = _json_.ti } else { this.ti = undefined }
        if(_json_.jiao != undefined) { this.jiao = _json_.jiao } else { this.jiao = undefined }
        if(_json_.zhi != undefined) { this.zhi = _json_.zhi } else { this.zhi = undefined }
    }

    readonly chi: number|undefined
    readonly hui: number|undefined
    readonly lin: number|undefined
    readonly mao: number|undefined
    readonly jia: number|undefined
    readonly luo: number|undefined
    readonly yu: number|undefined
    readonly zhao: number|undefined
    readonly ti: number|undefined
    readonly jiao: number|undefined
    readonly zhi: number|undefined

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class skill {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.effect_str === undefined) { throw new Error() }
        this.effectStr = _json_.effect_str
        if (_json_.description === undefined) { throw new Error() }
        this.description = _json_.description
        if (_json_.type === undefined) { throw new Error() }
        this.type = _json_.type
        if (_json_.target === undefined) { throw new Error() }
        this.target = _json_.target
        if (_json_.trigger === undefined) { throw new Error() }
        this.trigger = _json_.trigger
        if (_json_.condition === undefined) { throw new Error() }
        this.condition = new Map<string, number>(); for(var _entry0_ of _json_.condition) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.condition.set(_k0, _v0);  }
        if(_json_.buff_round != undefined) { this.buffRound = _json_.buff_round } else { this.buffRound = undefined }
        if (_json_.rate === undefined) { throw new Error() }
        this.rate = _json_.rate
        if (_json_.values === undefined) { throw new Error() }
        this.values = new Map<string, number>(); for(var _entry0_ of _json_.values) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.values.set(_k0, _v0);  }
    }

    /**
     * id
     */
    readonly id: string
    /**
     * 名字
     */
    readonly name: string
    /**
     * 效果描述
     */
    readonly effectStr: string
    /**
     * 描述
     */
    readonly description: string
    /**
     * 技能类型
     */
    readonly type: SkillType
    /**
     * 生效目标
     */
    readonly target: Target
    /**
     * 时机
     */
    readonly trigger: SkillTrigger
    /**
     * 条件
     */
    readonly condition: Map<string, number>
    /**
     * 持续回合<br/>没有值则不属于buff类，-1永久，0本轮攻击生效，&gt;0buff时间。Buff属性状态、攻防
     */
    readonly buffRound: number|undefined
    /**
     * 概率
     */
    readonly rate: number
    /**
     * 效果值
     */
    readonly values: Map<string, number>

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class vector2 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vector3 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vector4 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
        if (_json_.w === undefined) { throw new Error() }
        this.w = _json_.w
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}






export class Tbachieve {
    private _dataMap: Map<number, achieve>
    private _dataList: achieve[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, achieve>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: achieve
            _v = new achieve(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, achieve> { return this._dataMap; }
    getDataList(): achieve[] { return this._dataList; }

    get(key: number): achieve | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbmap_level {
    private _dataMap: Map<number, map_level>
    private _dataList: map_level[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, map_level>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: map_level
            _v = new map_level(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, map_level> { return this._dataMap; }
    getDataList(): map_level[] { return this._dataList; }

    get(key: number): map_level | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbother {
    private _dataMap: Map<string, other>
    private _dataList: other[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, other>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: other
            _v = new other(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, other> { return this._dataMap; }
    getDataList(): other[] { return this._dataList; }

    get(key: string): other | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbrole {
    private _dataMap: Map<number, role>
    private _dataList: role[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, role>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: role
            _v = new role(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, role> { return this._dataMap; }
    getDataList(): role[] { return this._dataList; }

    get(key: number): role | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbrole_level {
    private _dataMap: Map<number, role_level>
    private _dataList: role_level[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, role_level>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: role_level
            _v = new role_level(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, role_level> { return this._dataMap; }
    getDataList(): role_level[] { return this._dataList; }

    get(key: number): role_level | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbskill {
    private _dataMap: Map<string, skill>
    private _dataList: skill[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, skill>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: skill
            _v = new skill(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, skill> { return this._dataMap; }
    getDataList(): skill[] { return this._dataList; }

    get(key: string): skill | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




type JsonLoader = (file: string) => any

export class Tables {
    private _Tbachieve: Tbachieve
    get Tbachieve(): Tbachieve  { return this._Tbachieve;}
    private _Tbmap_level: Tbmap_level
    get Tbmap_level(): Tbmap_level  { return this._Tbmap_level;}
    private _Tbother: Tbother
    get Tbother(): Tbother  { return this._Tbother;}
    private _Tbrole: Tbrole
    get Tbrole(): Tbrole  { return this._Tbrole;}
    private _Tbrole_level: Tbrole_level
    get Tbrole_level(): Tbrole_level  { return this._Tbrole_level;}
    private _Tbskill: Tbskill
    get Tbskill(): Tbskill  { return this._Tbskill;}

    constructor(loader: JsonLoader) {
        this._Tbachieve = new Tbachieve(loader('tbachieve'))
        this._Tbmap_level = new Tbmap_level(loader('tbmap_level'))
        this._Tbother = new Tbother(loader('tbother'))
        this._Tbrole = new Tbrole(loader('tbrole'))
        this._Tbrole_level = new Tbrole_level(loader('tbrole_level'))
        this._Tbskill = new Tbskill(loader('tbskill'))

        this._Tbachieve.resolve(this)
        this._Tbmap_level.resolve(this)
        this._Tbother.resolve(this)
        this._Tbrole.resolve(this)
        this._Tbrole_level.resolve(this)
        this._Tbskill.resolve(this)
    }
}

