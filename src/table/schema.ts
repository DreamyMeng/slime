
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export namespace role { 
export enum Quality {
    /**
     * 无
     */
    NONE = 0,
    /**
     * 灵
     */
    LING = 1,
    /**
     * 仙
     */
    XIAN = 2,
    /**
     * 神
     */
    SHEN = 3,
}

} 





export class level {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.exp_need === undefined) { throw new Error() }
        this.expNeed = _json_.exp_need
        if (_json_.exp_dead === undefined) { throw new Error() }
        this.expDead = _json_.exp_dead
        if (_json_.attack === undefined) { throw new Error() }
        this.attack = _json_.attack
        if (_json_.defence === undefined) { throw new Error() }
        this.defence = _json_.defence
        if (_json_.health === undefined) { throw new Error() }
        this.health = _json_.health
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 升级所需经验
     */
    readonly expNeed: number
    /**
     * 死亡获得经验
     */
    readonly expDead: number
    /**
     * 攻击值
     */
    readonly attack: number
    /**
     * 防御值
     */
    readonly defence: number
    /**
     * 生命值
     */
    readonly health: number

    resolve(tables:Tables) {
        
        
        
        
        
        
    }
}





export class role {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.rare === undefined) { throw new Error() }
        this.rare = _json_.rare
        if (_json_.quality_type === undefined) { throw new Error() }
        this.qualityType = _json_.quality_type
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.race === undefined) { throw new Error() }
        this.race = _json_.race
        if (_json_.remain === undefined) { throw new Error() }
        this.remain = _json_.remain
        if (_json_.exp_need === undefined) { throw new Error() }
        this.expNeed = _json_.exp_need
        if (_json_.exp_dead === undefined) { throw new Error() }
        this.expDead = _json_.exp_dead
        if (_json_.attack_rate === undefined) { throw new Error() }
        this.attackRate = _json_.attack_rate
        if (_json_.defence_rate === undefined) { throw new Error() }
        this.defenceRate = _json_.defence_rate
        if (_json_.health_rate === undefined) { throw new Error() }
        this.healthRate = _json_.health_rate
        if (_json_.attack_add === undefined) { throw new Error() }
        this.attackAdd = _json_.attack_add
        if (_json_.defence_add === undefined) { throw new Error() }
        this.defenceAdd = _json_.defence_add
        if (_json_.health_add === undefined) { throw new Error() }
        this.healthAdd = _json_.health_add
        if (_json_.ralations === undefined) { throw new Error() }
        this.ralations = new role.Relation(_json_.ralations)
        if (_json_.skills === undefined) { throw new Error() }
        { this.skills = []; for(let _ele0 of _json_.skills) { let _e0; _e0 = _ele0; this.skills.push(_e0);}}
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 名字
     */
    readonly name: string
    /**
     * 稀有度
     */
    readonly rare: number
    /**
     * 品类
     */
    readonly qualityType: role.Quality
    /**
     * 品质
     */
    readonly quality: number
    /**
     * 种族
     */
    readonly race: number
    /**
     * 保留
     */
    readonly remain: number
    /**
     * 升级所需经验比例
     */
    readonly expNeed: number
    /**
     * 死亡获得经验比例
     */
    readonly expDead: number
    /**
     * 攻击比例
     */
    readonly attackRate: number
    /**
     * 防御比例
     */
    readonly defenceRate: number
    /**
     * 血量比例
     */
    readonly healthRate: number
    /**
     * 图鉴攻击
     */
    readonly attackAdd: number
    /**
     * 图鉴防御
     */
    readonly defenceAdd: number
    /**
     * 图鉴血量
     */
    readonly healthAdd: number
    readonly ralations: role.Relation
    readonly skills: string[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        this.ralations?.resolve(tables);
        
    }
}




export namespace role {
export class Relation {

    constructor(_json_: any) {
        if(_json_.chi != undefined) { this.chi = _json_.chi } else { this.chi = undefined }
        if(_json_.hui != undefined) { this.hui = _json_.hui } else { this.hui = undefined }
        if(_json_.lin != undefined) { this.lin = _json_.lin } else { this.lin = undefined }
        if(_json_.mao != undefined) { this.mao = _json_.mao } else { this.mao = undefined }
        if(_json_.jia != undefined) { this.jia = _json_.jia } else { this.jia = undefined }
        if(_json_.luo != undefined) { this.luo = _json_.luo } else { this.luo = undefined }
        if(_json_.yu != undefined) { this.yu = _json_.yu } else { this.yu = undefined }
        if(_json_.zhao != undefined) { this.zhao = _json_.zhao } else { this.zhao = undefined }
        if(_json_.ti != undefined) { this.ti = _json_.ti } else { this.ti = undefined }
        if(_json_.jiao != undefined) { this.jiao = _json_.jiao } else { this.jiao = undefined }
        if(_json_.zhi != undefined) { this.zhi = _json_.zhi } else { this.zhi = undefined }
    }

    readonly chi: number|undefined
    readonly hui: number|undefined
    readonly lin: number|undefined
    readonly mao: number|undefined
    readonly jia: number|undefined
    readonly luo: number|undefined
    readonly yu: number|undefined
    readonly zhao: number|undefined
    readonly ti: number|undefined
    readonly jiao: number|undefined
    readonly zhi: number|undefined

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}

}



export class vector2 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vector3 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vector4 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
        if (_json_.w === undefined) { throw new Error() }
        this.w = _json_.w
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}






export class Tblevel {
    private _dataMap: Map<number, level>
    private _dataList: level[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, level>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: level
            _v = new level(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, level> { return this._dataMap; }
    getDataList(): level[] { return this._dataList; }

    get(key: number): level | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbrole {
    private _dataMap: Map<number, role>
    private _dataList: role[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, role>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: role
            _v = new role(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, role> { return this._dataMap; }
    getDataList(): role[] { return this._dataList; }

    get(key: number): role | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




type JsonLoader = (file: string) => any

export class Tables {
    private _Tblevel: Tblevel
    get Tblevel(): Tblevel  { return this._Tblevel;}
    private _Tbrole: Tbrole
    get Tbrole(): Tbrole  { return this._Tbrole;}

    constructor(loader: JsonLoader) {
        this._Tblevel = new Tblevel(loader('tblevel'))
        this._Tbrole = new Tbrole(loader('tbrole'))

        this._Tblevel.resolve(this)
        this._Tbrole.resolve(this)
    }
}

